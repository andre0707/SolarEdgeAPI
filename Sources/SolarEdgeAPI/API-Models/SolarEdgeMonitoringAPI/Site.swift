//
//  Site.swift
//  
//
//  Created by Andre Albach on 26.03.23.
//

import Foundation

/// A site is basically a location for a photovoltaic system
public struct Site: Codable {
    public let id: Int
    public let name: String
    public let accountId: Int
    public let status: String
    public let peakPower: Double
    public let lastUpdateTime: Date
    public let installationDate: Date
    public let currency: String?
    public let ptoDate: Date?
    public let notes: String
    public let type: String
    public let location: SEMLocation
    public let uris: [String: String]
    public let publicSettings: PublicSettings
    public let primaryModule: PrimaryModule
    
    // Alert information are only available when the API key is generated by an account. Site level generated API keys do not return alert information.
    public let alertQuantity: Int?
    public let alertSeverity: String?
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        self.id = try container.decode(Int.self, forKey: .id)
        self.name = try container.decode(String.self, forKey: .name)
        self.accountId = try container.decode(Int.self, forKey: .accountId)
        self.status = try container.decode(String.self, forKey: .status)
        self.peakPower = try container.decode(Double.self, forKey: .peakPower)
        
        let _lastUpdateTime = try container.decode(String.self, forKey: .lastUpdateTime)
        guard let lastUpdateTime = DateFormatter.apiDate.date(from: _lastUpdateTime) else { throw SolarEdgeAPIError.decoding("Invalid date") }
        self.lastUpdateTime = lastUpdateTime
        
        self.currency = try container.decodeIfPresent(String.self, forKey: .currency)
                
        let _installationDate = try container.decode(String.self, forKey: .installationDate)
        guard let installationDate = DateFormatter.apiDate.date(from: _installationDate) else { throw SolarEdgeAPIError.decoding("Invalid date") }
        self.installationDate = installationDate
        
        if let _ptoDate = try container.decodeIfPresent(String.self, forKey: .ptoDate) {
            self.ptoDate = DateFormatter.apiDate.date(from: _ptoDate)
        } else {
            self.ptoDate = nil
        }
        
        self.notes = try container.decode(String.self, forKey: .notes)
        self.type = try container.decode(String.self, forKey: .type)
        self.location = try container.decode(SEMLocation.self, forKey: .location)
        self.alertQuantity = try container.decodeIfPresent(Int.self, forKey: .alertQuantity)
        self.alertSeverity = try container.decodeIfPresent(String.self, forKey: .alertSeverity)
        self.uris = try container.decode([String: String].self, forKey: .uris)
        self.publicSettings = try container.decode(PublicSettings.self, forKey: .publicSettings)
        self.primaryModule = try container.decode(PrimaryModule.self, forKey: .primaryModule)
    }
}


extension Site {
    /// Public settings for the site
    public struct PublicSettings: Codable {
        public let isPublic: Bool
        public let name: String?
    }
}


extension Site {
    /// The primary module for the site
    public struct PrimaryModule: Codable {
        public let manufacturerName: String
        public let modelName: String
        public let maximumPower: Int
        public let temperatureCoef: Double
    }
}
